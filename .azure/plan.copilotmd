# Azure Deployment Plan for msal-passkey-force Project

## **Goal**
Deploy the secure kiosk authentication application with MSAL, PKCE, and passkey authentication to Azure Web App Service using AZD in the Premium tier.

## **Project Information**

AppName: msal-passkey-force
- **Technology Stack**: Node.js/Express backend with React frontend
- **Application Type**: Secure kiosk authentication app with Entra ID, PKCE, and passkey support
- **Build Process**: Webpack for frontend bundling, Express server for backend
- **Dependencies**: MSAL authentication, QR code generation, CORS, security middleware
- **Hosting Recommendation**: Azure Web App Service Premium for enterprise-grade security and performance

## **Azure Resources Architecture**
> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    A[User/Browser] --> B[Azure Web App Service<br/>Premium Tier]
    B --> C[Application Insights<br/>Monitoring & Telemetry]
    B --> D[Key Vault<br/>Secrets Management]
    B --> E[Entra ID<br/>Authentication]
    F[Log Analytics Workspace] --> C
    B --> F
    
    subgraph "Resource Group: rg-rg-et-trivia-dev"
        B
        C
        D
        F
    end
```

Data Flow:
- Users access the application through the Azure Web App Service
- The app authenticates users via Entra ID using MSAL with PKCE
- Application secrets and configuration are stored securely in Key Vault
- Telemetry and logs are captured by Application Insights and Log Analytics

## **Recommended Azure Resources**

**Primary Application Hosting:**
- Application: app-play-et-trivia-toronto-hub-dev
  - Hosting Service Type: Azure Web App Service
  - SKU: Premium P1V2 (1 Core, 3.5GB RAM, auto-scaling capable)
  - Configuration:
    - Runtime: Node.js 18 LTS
    - Always On: Enabled (Premium tier feature)
    - HTTPS Only: Enabled
    - Environment Variables:
      - PORT: 3001
      - NODE_ENV: production
      - ALLOWED_ORIGINS: https://app-play-et-trivia-toronto-hub-dev.azurewebsites.net
      - AZURE_CLIENT_ID: @Microsoft.KeyVault(SecretUri=...)
      - AZURE_CLIENT_SECRET: @Microsoft.KeyVault(SecretUri=...)
      - AZURE_TENANT_ID: @Microsoft.KeyVault(SecretUri=...)

**Supporting Services:**
- Application Insights: ai-play-et-trivia-toronto-hub-dev
  - SKU: Standard (pay-per-GB ingestion)
  - Purpose: Application performance monitoring, error tracking, user analytics
  
- Log Analytics Workspace: law-play-et-trivia-toronto-hub-dev
  - SKU: Pay-per-GB
  - Purpose: Centralized logging for all services
  
- Key Vault: kv-play-et-trivia-toronto-hub-dev
  - SKU: Standard
  - Purpose: Secure storage of authentication secrets and connection strings
  - Access Policy: Web App managed identity with Get/List secrets permissions

**Security Configurations:**
- System Managed Identity: Enabled on Web App Service
- Key Vault Access Policy: Web App managed identity assigned Get/List permissions
- HTTPS Only: Enforced
- TLS Version: 1.2 minimum
- Security Headers: Helmet.js middleware configured

## **Execution Steps**
> **Below are the steps for Copilot to follow; ask Copilot to update or execute this plan.**

1. **Provision Azure Infrastructure And Deploy the Application:**
    1. Based on the required Azure resources in plan, get the IaC rules from the tool `iac-rules-get`
    2. Generate IaC (Bicep files) for required Azure resources based on the plan
    3. Pre-check: use `get_errors` tool to check generated Bicep grammar errors. Fix errors if they exist
    4. Run the AZD command `azd up` to provision the resources and confirm each resource is created or already exists
    5. Check the deployment output to ensure the resources are provisioned successfully
    6. Check the application log with tool `azd-app-log-get` to ensure the services are running

2. **Summary:**
    1. Summarize the deployment result and save to '.azure/summary.copilotmd'. It should list all deployment files and brief description of each file, then have a diagram showing the provisioned Azure resources