import { useState, useEffect } from 'react';
import axios from 'axios';
import {
  startRegistration,
  startAuthentication,
  browserSupportsWebAuthn,
  platformAuthenticatorIsAvailable
} from '@simplewebauthn/browser';

/**
 * Secure Kiosk React App with WebAuthn Passkey Authentication
 * 
 * Features:
 * - WebAuthn Passkey Registration and Authentication
 * - Cross-device login with QR code support
 * - Platform and cross-platform authenticator support
 * - Session management and protected routes
 * - Modern biometric authentication
 * - Secure kiosk interface
 */

// Session utilities for authentication state
const SessionUtils = {
  set: (key, value) => {
    try {
      sessionStorage.setItem(key, JSON.stringify(value));
    } catch (e) {
      console.warn('Failed to set session storage:', key);
    }
  },
  
  get: (key) => {
    try {
      const item = sessionStorage.getItem(key);
      return item ? JSON.parse(item) : null;
    } catch (e) {
      console.warn('Failed to parse session storage:', key);
      return null;
    }
  },
  
  delete: (key) => {
    sessionStorage.removeItem(key);
  },
  
  exists: (key) => {
    return sessionStorage.getItem(key) !== null;
  }
};

// API Configuration
const API_BASE_URL = window.location.origin;

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json'
  },
  withCredentials: true // Important for session cookies
});

// WebAuthn Support Check
const WebAuthnSupport = {
  isSupported: () => browserSupportsWebAuthn(),
  isPlatformAvailable: () => platformAuthenticatorIsAvailable(),
  getCapabilities: async () => {
    const supported = browserSupportsWebAuthn();
    let platformAvailable = false;
    
    try {
      platformAvailable = await platformAuthenticatorIsAvailable();
    } catch (e) {
      console.warn('Platform authenticator check failed:', e);
    }
    
    return { supported, platformAvailable };
  }
};

function App() {
  // Authentication State
  const [authState, setAuthState] = useState('loading'); // loading, unauthenticated, authenticated, registering, error
  const [user, setUser] = useState(null);
  const [session, setSession] = useState(null);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  
  // WebAuthn State
  const [webAuthnSupport, setWebAuthnSupport] = useState({ supported: false, platformAvailable: false });
  const [registrationMode, setRegistrationMode] = useState(false);
  
  // App State
  const [count, setCount] = useState(0);
  const [message, setMessage] = useState('Welcome to Secure Kiosk!');
  const [userProfile, setUserProfile] = useState(null);
  const [users, setUsers] = useState([]);

  // Initialize app and check WebAuthn support
  useEffect(() => {
    const initialize = async () => {
      try {
        if (process.env.NODE_ENV === 'development') {
          console.log('🔐 App initialized - Checking WebAuthn support and session...');
        }
        
        // Check WebAuthn support
        const capabilities = await WebAuthnSupport.getCapabilities();
        setWebAuthnSupport(capabilities);
        
        if (!capabilities.supported) {
          setError('Your browser does not support WebAuthn. Please use a modern browser.');
          setAuthState('error');
          return;
        }
        
        // Check for existing session
        await checkExistingSession();
        
        // Load users list
        await loadUsers();
        
      } catch (err) {
        console.error('Initialization error:', err);
        setError('Failed to initialize application');
        setAuthState('error');
      }
    };
    
    initialize();
  }, []); // Empty dependency array means this runs once when component mounts

  // WebAuthn Functions
  
  // Check for existing session
  const checkExistingSession = async () => {
    try {
      const response = await api.get('/api/auth/session');
      
      if (response.data && response.data.user) {
        if (process.env.NODE_ENV === 'development') {
          console.log('✅ Found existing session:', response.data.user.username);
        }
        
        setUser(response.data.user);
        setSession(response.data.session);
        setAuthState('authenticated');
        
        // Fetch user profile data
        await fetchUserProfile();
      } else {
        setAuthState('unauthenticated');
      }
    } catch (err) {
      if (err.response?.status === 401) {
        // No session exists
        setAuthState('unauthenticated');
      } else {
        console.error('Session check error:', err);
        setError('Failed to check session');
        setAuthState('error');
      }
    }
  };
  
  // Load users list
  const loadUsers = async () => {
    try {
      const response = await api.get('/api/users');
      setUsers(response.data);
    } catch (err) {
      console.warn('Failed to load users:', err);
    }
  };
  
  // Passkey Registration
  const handlePasskeyRegistration = async (username, displayName) => {
    if (!webAuthnSupport.supported) {
      setError('WebAuthn not supported in this browser');
      return;
    }
    
    setIsLoading(true);
    setError(null);
    
    try {
      if (process.env.NODE_ENV === 'development') {
        console.log('🔐 Starting passkey registration for:', username);
      }
      
      // Get registration options from server
      const optionsResponse = await api.post('/api/webauthn/generate-registration-options', {
        username,
        displayName
      });
      
      // Start registration ceremony
      const registrationResponse = await startRegistration(optionsResponse.data);
      
      // Send response to server for verification
      const verificationResponse = await api.post('/api/webauthn/verify-registration', registrationResponse);
      
      if (verificationResponse.data.verified) {
        if (process.env.NODE_ENV === 'development') {
          console.log('✅ Passkey registered successfully!');
        }
        
        setMessage('Passkey registered successfully! You can now authenticate.');
        setRegistrationMode(false);
        await loadUsers();
      } else {
        throw new Error('Registration verification failed');
      }
      
    } catch (err) {
      console.error('Registration error:', err);
      
      if (err.name === 'NotAllowedError') {
        setError('Registration cancelled by user');
      } else if (err.name === 'InvalidStateError') {
        setError('This device already has a passkey for this user');
      } else {
        setError(err.message || 'Failed to register passkey');
      }
    } finally {
      setIsLoading(false);
    }
  };
  
  // Passkey Authentication
  const handlePasskeyAuthentication = async (username = null) => {
    if (!webAuthnSupport.supported) {
      setError('WebAuthn not supported in this browser');
      return;
    }
    
    setIsLoading(true);
    setError(null);
    
    try {
      if (process.env.NODE_ENV === 'development') {
        console.log('🔐 Starting passkey authentication for:', username || 'any user');
      }
      
      // Get authentication options from server
      const optionsResponse = await api.post('/api/webauthn/generate-authentication-options', {
        username
      });
      
      // Start authentication ceremony
      const authenticationResponse = await startAuthentication(optionsResponse.data);
      
      // Send response to server for verification
      const verificationResponse = await api.post('/api/webauthn/verify-authentication', authenticationResponse);
      
      if (verificationResponse.data.verified) {
        if (process.env.NODE_ENV === 'development') {
          console.log('✅ Authentication successful!');
        }
        
        setUser(verificationResponse.data.user);
        setSession({ sessionId: verificationResponse.data.sessionId });
        setAuthState('authenticated');
        setMessage(`Welcome back, ${verificationResponse.data.user.displayName}!`);
        
        // Fetch user profile data
        await fetchUserProfile();
        
      } else {
        throw new Error('Authentication verification failed');
      }
      
    } catch (err) {
      console.error('Authentication error:', err);
      
      if (err.name === 'NotAllowedError') {
        setError('Authentication cancelled by user');
      } else if (err.name === 'InvalidStateError') {
        setError('No passkey found for this user');
      } else {
        setError(err.message || 'Failed to authenticate with passkey');
      }
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch user profile data for authenticated user
  const fetchUserProfile = async () => {
    try {
      const response = await api.get('/api/protected/profile');
      setUserProfile(response.data.user);
      
      if (process.env.NODE_ENV === 'development') {
        console.log('👤 User profile loaded:', response.data.user.displayName);
      }
      
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Failed to fetch user profile:', error);
      }
      // Don't set error state - profile fetch failure shouldn't break the app
    }
  };

  // Logout function
  const handleLogout = async () => {
    try {
      await api.post('/api/auth/logout');
      
      // Reset all state
      setAuthState('unauthenticated');
      setUser(null);
      setUserProfile(null);
      setSession(null);
      setError(null);
      setMessage('Welcome to Secure Kiosk!');
      setCount(0);
      
      if (process.env.NODE_ENV === 'development') {
        console.log('🔓 Logged out successfully');
      }
      
    } catch (error) {
      console.error('Logout error:', error);
      // Still reset local state even if server logout fails
      setAuthState('unauthenticated');
      setUser(null);
      setUserProfile(null);
      setSession(null);
    }
  };

  // App utility functions
  const handleIncrement = () => setCount(count + 1);
  const handleDecrement = () => setCount(count - 1);
  const handleReset = () => setCount(0);

  const handleMessageChange = () => {
    const messages = [
      'Welcome to Secure Kiosk!',
      'Authenticated with Passkeys!',
      'WebAuthn Security Enabled!',
      'Biometric Authentication Active!',
      'Cross-device Login Supported!',
      userProfile ? `Hello ${userProfile.displayName}!` : 'Secure Session Active!'
    ];
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];
    setMessage(randomMessage);
  };

  // Registration form component
  const RegistrationForm = () => {
    const [username, setUsername] = useState('');
    const [displayName, setDisplayName] = useState('');

    const handleSubmit = (e) => {
      e.preventDefault();
      if (username.trim()) {
        handlePasskeyRegistration(username.trim(), displayName.trim() || username.trim());
      }
    };

    return (
      <form onSubmit={handleSubmit} className="registration-form">
        <h3>Register New Passkey</h3>
        <div className="form-group">
          <label htmlFor="username">Username:</label>
          <input
            type="text"
            id="username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            placeholder="Enter username"
            required
            disabled={isLoading}
          />
        </div>
        <div className="form-group">
          <label htmlFor="displayName">Display Name (optional):</label>
          <input
            type="text"
            id="displayName"
            value={displayName}
            onChange={(e) => setDisplayName(e.target.value)}
            placeholder="Enter display name"
            disabled={isLoading}
          />
        </div>
        <div className="form-actions">
          <button type="submit" disabled={!username.trim() || isLoading} className="primary">
            {isLoading ? 'Registering...' : 'Register Passkey'}
          </button>
          <button type="button" onClick={() => setRegistrationMode(false)} disabled={isLoading}>
            Cancel
          </button>
        </div>
      </form>
    );
  };

  // Render initialization screen (briefly shown while starting auth)
  // Loading state for cache check
  if (authState === 'checking_cache') {
    return (
      <div className="app">
        <header className="app-header">
          <h1>🔐 Secure Kiosk</h1>
          <p className="message">Checking for existing session...</p>
        </header>
        
        <main className="app-main">
          <div className="auth-section">
            <div className="auth-progress">
              <div className="loading-spinner"></div>
              <h2>🔍 Checking Cached Authentication</h2>
              <p>Looking for existing login session...</p>
              <div className="security-note">
                <p><strong>🔒 Attempting Silent Login:</strong> Checking for valid authentication token in secure browser storage.</p>
              </div>
            </div>
          </div>
        </main>
      </div>
    );
  }

  if (authState === 'initializing') {
    return (
      <div className="app">
        <header className="app-header">
          <h1>🔐 Secure Kiosk</h1>
          <p className="message">Initializing Authentication...</p>
        </header>
        
        <main className="app-main">
          <div className="auth-section">
            <div className="auth-progress">
              <div className="loading-spinner"></div>
              <h2>Starting Secure Authentication</h2>
              <p>Generating QR code for mobile sign-in...</p>
              
              <div className="security-features">
                <h3>🛡️ Security Features Active</h3>
                <ul>
                  <li>✅ PKCE (Proof Key for Code Exchange)</li>
                  <li>✅ Device Code Flow for kiosks</li>
                  <li>✅ Passkey authentication support</li>
                  <li>✅ Microsoft Entra ID protection</li>
                  <li>✅ QR code mobile sign-in</li>
                </ul>
              </div>
            </div>
          </div>
        </main>
        
        <footer className="app-footer">
          <p>&copy; 2025 Secure Kiosk App - Protected by Microsoft Entra ID</p>
        </footer>
      </div>
    );
  }

  // Render authentication in progress
  if (authState === 'authenticating') {
    return (
      <div className="app">
        <header className="app-header">
          <h1>📱 Authentication in Progress</h1>
          <p className="message">Scan QR code with your mobile device</p>
        </header>
        
        <main className="app-main">
          <div className="qr-auth-section">
            {authData && (
              <>
                <div className="qr-code-container">
                  <h2>Scan with Your Phone</h2>
                  <div 
                    className="qr-code"
                    dangerouslySetInnerHTML={{ __html: authData.qrCode }}
                  />
                  
                  <div className="auth-instructions">
                    <h3>Alternative: Manual Code Entry</h3>
                    <p>Go to: <strong>{authData.verificationUri}</strong></p>
                    <p>Enter code: <span className="user-code">{authData.userCode}</span></p>
                  </div>
                </div>
                
                <div className="auth-progress">
                  <div className="loading-spinner"></div>
                  <p>Waiting for authentication...</p>
                  <p className="auth-message">{authData.message}</p>
                </div>
              </>
            )}
            
            <div className="button-group">
              <button onClick={generateNewCode} className="btn btn-primary">
                Generate New Code
              </button>
              <button onClick={logout} className="btn btn-secondary">
                Cancel Authentication
              </button>
            </div>
          </div>
        </main>
      </div>
    );
  }

  // Render error state
  if (authState === 'error') {
    const isAuthError = error && (error.includes('expired') || error.includes('Authentication failed') || error.includes('AADSTS'));
    
    return (
      <div className="app">
        <header className="app-header">
          <h1>❌ Authentication Error</h1>
          <p className="message">
            {isAuthError ? 'Will retry automatically...' : 'Manual retry required'}
          </p>
        </header>
        
        <main className="app-main">
          <div className="error-section">
            <h2>{isAuthError ? 'Authentication Failed' : 'Connection Error'}</h2>
            <p className="error-message">{error}</p>
            
            {isAuthError ? (
              <div className="auth-progress">
                <div className="loading-spinner"></div>
                <p>Automatically retrying in 5 seconds...</p>
              </div>
            ) : (
              <p>Please check your connection and try again.</p>
            )}
            
            <div className="button-group">
              <button onClick={startAuthentication} className="btn btn-primary">
                Try Again Now
              </button>
              <button onClick={() => {
                CookieUtils.delete(AUTH_TOKEN_COOKIE);
                CookieUtils.delete(AUTH_USER_COOKIE);
                delete api.defaults.headers.common['Authorization'];
                setCachedToken(null);
                setAuthState('checking_cache');
                setTimeout(() => performPreflightCheck(), 100);
              }} className="btn btn-secondary">
                Clear Cache & Retry
              </button>
            </div>
          </div>
        </main>
      </div>
    );
  }

  // Render authenticated app
  return (
    <div className="app">
      <header className="app-header">
        <h1>🔒 Secure Kiosk Dashboard</h1>
        <p className="message">{message}</p>
        {user && (
          <div className="user-info">
            <span>👤 {userProfile?.displayName || user.name || user.username}</span>
            <button onClick={logout} className="btn btn-small btn-logout">
              Sign Out
            </button>
          </div>
        )}
      </header>
      
      <main className="app-main">
        <div className="counter-section">
          <h2>Counter: {count}</h2>
          <div className="button-group">
            <button onClick={handleDecrement} className="btn btn-danger">
              -
            </button>
            <button onClick={handleReset} className="btn btn-secondary">
              Reset
            </button>
            <button onClick={handleIncrement} className="btn btn-success">
              +
            </button>
          </div>
        </div>
        
        <div className="message-section">
          <button onClick={handleMessageChange} className="btn btn-primary">
            Change Message
          </button>
        </div>
        
        {userProfile && (
          <div className="profile-section">
            <h3>👤 User Profile</h3>
            <div className="profile-info">
              <p><strong>Name:</strong> {userProfile.displayName}</p>
              <p><strong>Email:</strong> {userProfile.mail || userProfile.userPrincipalName}</p>
              <p><strong>Job Title:</strong> {userProfile.jobTitle || 'Not specified'}</p>
              <p><strong>Department:</strong> {userProfile.department || 'Not specified'}</p>
            </div>
          </div>
        )}
        
        <div className="info-section">
          <h3>🔐 Security Features</h3>
          <ul>
            <li>✅ OAuth 2.0 Authorization Code Flow with PKCE</li>
            <li>✅ Device Code Flow for kiosk scenarios</li>
            <li>✅ Microsoft Entra ID authentication</li>
            <li>✅ Passkey and mobile device support</li>
            <li>✅ Microsoft Graph API integration</li>
            <li>✅ Secure session management</li>
            <li>✅ Rate limiting and security headers</li>
          </ul>
        </div>
      </main>
      
      <footer className="app-footer">
        <p>&copy; 2025 Secure Kiosk App - Session Active</p>
      </footer>
    </div>
  );
}

export default App;